on: workflow_dispatch
jobs:   
  build_job:
    name: build env test
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-node@v4.0.2
        with: 
          node-version: '20.x'
      - name: install vsce
        shell: pwsh
        run: npm install -g @vscode/vsce
      - name: "Download latest AutoHotkey release"
        uses: "robinraju/release-downloader@v1.7"
        with:
          repository: AutoHotkey/AutoHotkey
          latest: true
          filename: "*.exe"
          tarBall: false
          zipBall: false
          out-file-path: "._ahk/installer"
      - name: Install AutoHotkey
        shell: pwsh
        run: |
          $cwd = (Get-Location).Path
          $ahk = "$cwd\._ahk"

          Write-Output "Preparing installer..." 
          Get-ChildItem -Path "$ahk\installer" -Filter *.exe -Recurse | ForEach-Object {
            Move-Item -Path $_.FullName -Destination "$ahk\installer\installer.exe" -Force
          }

          $ahkDist = "$ahk\installation"

          Write-Output "Performing AHK v2.x install..."
          Invoke-Expression "$ahk\installer\installer.exe /silent /installto $ahkDist"
          # Add to Path
          echo $ahkDist | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          Write-Output "AHK ${{ inputs.version }} installation completed!"
      - name: Test Autohotkey
        shell: pwsh
        run: |
          $pinfo = New-Object System.Diagnostics.ProcessStartInfo
          $pinfo.FileName = "AutoHotkey64.exe"
          $pinfo.RedirectStandardError = $true
          $pinfo.RedirectStandardOutput = $true
          $pinfo.RedirectStandardInput  = $true
          $pinfo.UseShellExecute = $false
          $pinfo.Arguments = "/ErrorStdOut *"
          $p = New-Object System.Diagnostics.Process
          $p.StartInfo = $pinfo
          $p.Start() | Out-Null
          $pStdin = $p.StandardInput
          $pStdin.WriteLine("FileAppend A_AhkVersion, '*'")
          $pStdin.Close()
          $p.WaitForExit()
          $stdout = $p.StandardOutput.ReadToEnd()
          $stderr = $p.StandardError.ReadToEnd()
          Write-Output "stdout: $stdout"
          Write-Output "stderr: $stderr"
          Write-Output "exit code: " + $p.ExitCode
